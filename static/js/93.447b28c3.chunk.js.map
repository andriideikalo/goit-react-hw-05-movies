{"version":3,"file":"static/js/93.447b28c3.chunk.js","mappings":"6NAEaA,EAAOC,EAAAA,GAAAA,GAAH,iTAuBJC,EAAYD,EAAAA,GAAAA,EAAH,4D,2BCnBhBE,EACE,OADFA,EAEK,UAFLA,EAIM,WA+CZ,EA5Ca,WACX,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAASH,GAArC,eAAOM,EAAP,KAAeC,EAAf,KAqBA,OAnBAC,EAAAA,EAAAA,YAAU,WACRD,EAAUP,IACVS,EAAAA,EAAAA,IAAaR,GACVS,MAAK,YAAe,IAAZN,EAAW,EAAXA,KACPC,EAAQD,GACRG,EAAUP,EACX,IACAW,OAAM,SAAUC,GACXA,EAAMC,SACRC,IAAAA,OAAAA,QAAwBF,EAAMC,SAASE,MAC9BH,EAAMI,QACfF,IAAAA,OAAAA,QAAwB,kBAExBA,IAAAA,OAAAA,QAAwB,QAASF,EAAMK,QAE1C,IACAC,SACJ,GAAE,CAACjB,KAGF,8BACGK,IAAWN,IACV,SAAC,EAAD,UACGI,EAAKe,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,UAAWC,EAAlB,EAAkBA,KAAMC,EAAxB,EAAwBA,aAAxB,OACR,2BACE,gBACEC,IAAG,yCAAoCD,GACvCE,IAAKH,KAEP,uBAAIA,KACJ,UAAC,EAAD,yBAA4BD,OANrBD,EADD,OAcnB,C,sLCpDKM,EAAW,+BACXC,EAAU,mCAAhB,SAEeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,oGACoBC,MAAM,GAAD,OAAIH,EAAJ,wCAA4CC,IADrE,cACQG,EADR,gBAEeA,EAAIC,OAFnB,mHAKeC,EAAa,GAAbA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA4BZ,GAA5B,uFACoBS,MAAM,GAAD,OAAIH,EAAJ,kBAAsBN,EAAtB,oBAAoCO,IAD7D,cACQG,EADR,gBAEeA,EAAIC,OAFnB,mHAKetB,EAAa,GAAbA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA4BW,GAA5B,uFACoBS,MAAM,GAAD,OAAIH,EAAJ,kBAAsBN,EAAtB,4BAA4CO,IADrE,cACQG,EADR,gBAEeA,EAAIC,OAFnB,mHAKeE,EAAgB,GAAhBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA+Bb,GAA/B,uFACoBS,MAAM,GAAD,OAAIH,EAAJ,kBAAsBN,EAAtB,4BAA4CO,IADrE,cACQG,EADR,gBAEeA,EAAIC,OAFnB,mHAKeG,EAAgB,GAAhBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA+BC,GAA/B,uFACoBN,MAAM,GAAD,OAClBH,EADkB,iCACeC,EADf,kBACgCQ,IAFzD,cACQL,EADR,gBAIeA,EAAIC,OAJnB,0G","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","services/Api.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 16px;\n\n  li {\n    flex-basis: calc((50% - 7 * 16px) / 8);\n  }\n\n  img {\n    width: 140px;\n    height: 140px;\n    margin-bottom: 16px;\n    object-fit: cover;\n\n    border-radius: 10px;\n  }\n\n  p {\n    font-size: 12px;\n  }\n`;\n\nexport const Character = styled.p`\n  margin-top: 4px;\n  color: grey;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCast } from 'services/Api';\nimport * as styl from './Cast.styled';\nimport Notiflix from 'notiflix';\n\nconst Status = {\n  IDLE: 'idle',\n  PENDING: 'pending',\n  REJECTED: 'rejected',\n  RESOLVED: 'resolved',\n};\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState(null);\n  const [status, setStatus] = useState(Status.IDLE);\n\n  useEffect(() => {\n    setStatus(Status.PENDING);\n    getMovieCast(movieId)\n      .then(({ cast }) => {\n        setCast(cast);\n        setStatus(Status.RESOLVED);\n      })\n      .catch(function (error) {\n        if (error.response) {\n          Notiflix.Notify.warning(error.response.data);\n        } else if (error.request) {\n          Notiflix.Notify.warning('Request failed');\n        } else {\n          Notiflix.Notify.warning('Error', error.message);\n        }\n      })\n      .finally();\n  }, [movieId]);\n\n  return (\n    <>\n      {status === Status.RESOLVED && (\n        <styl.List>\n          {cast.map(({ id, character, name, profile_path }) => (\n            <li key={id}>\n              <img\n                src={`https://image.tmdb.org/t/p/w500${profile_path}`}\n                alt={name}\n              />\n              <p>{name}</p>\n              <styl.Character>Character: {character}</styl.Character>\n            </li>\n          ))}\n        </styl.List>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","// приклад запиту\n// https://api.themoviedb.org/3/movie/550?api_key=e0f7258397e08a39ddd2202708092bf4\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'e0f7258397e08a39ddd2202708092bf4';\n\nasync function getTrending() {\n  const res = await fetch(`${BASE_URL}/trending/movie/week?api_key=${API_KEY}`);\n  return await res.json();\n}\n\nasync function getMovieById(id) {\n  const res = await fetch(`${BASE_URL}/movie/${id}?api_key=${API_KEY}`);\n  return await res.json();\n}\n\nasync function getMovieCast(id) {\n  const res = await fetch(`${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}`);\n  return await res.json();\n}\n\nasync function getMovieReviews(id) {\n  const res = await fetch(`${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}`);\n  return await res.json();\n}\n\nasync function getMovieByQuery(query) {\n  const res = await fetch(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}`\n  );\n  return await res.json();\n}\n\nexport {\n  getTrending,\n  getMovieById,\n  getMovieCast,\n  getMovieReviews,\n  getMovieByQuery,\n};\n"],"names":["List","styled","Character","Status","movieId","useParams","useState","cast","setCast","status","setStatus","useEffect","getMovieCast","then","catch","error","response","Notiflix","data","request","message","finally","map","id","character","name","profile_path","src","alt","BASE_URL","API_KEY","getTrending","fetch","res","json","getMovieById","getMovieReviews","getMovieByQuery","query"],"sourceRoot":""}