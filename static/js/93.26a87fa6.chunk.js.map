{"version":3,"file":"static/js/93.26a87fa6.chunk.js","mappings":"0OAEaA,EAAOC,EAAAA,GAAAA,GAAH,4EAKJC,EAAOD,EAAAA,GAAAA,GAAH,kEAIJE,EAAWF,EAAAA,GAAAA,EAAH,iEAKRG,EAAMH,EAAAA,GAAAA,IAAH,iIAQHI,EAAYJ,EAAAA,GAAAA,EAAH,gE,4BC2BtB,EA7Ca,WACX,IAAQK,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KAYA,IAVAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAaN,GACVO,MAAK,YAAe,IAAZJ,EAAW,EAAXA,KACPK,QAAQC,IAAIN,GACZC,EAAQD,EACT,IACAO,OAAM,SAAAC,GAAK,OAAIH,QAAQC,IAAIE,EAAhB,IACXC,SACJ,GAAE,CAACZ,IAECG,EAOL,OACE,8BACGA,EAAKU,OAAS,GACb,SAAC,EAAD,UACGV,EAAKW,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,UAAWC,EAAlB,EAAkBA,KAAMC,EAAxB,EAAwBA,aAAxB,OACR,UAAC,EAAD,YACE,SAAC,EAAD,CACEC,IAAG,yCAAoCD,GACvCE,IAAKH,KAEP,SAAC,EAAD,UAAgBA,KAChB,UAAC,EAAD,yBAA4BD,OANdD,EADR,MAYZM,IAAAA,OAAAA,QACE,sDAKT,C,yLC9CKC,EAAW,+BACXC,EAAU,mCAAhB,SAEeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,oGACoBC,MAAM,GAAD,OAAIH,EAAJ,wCAA4CC,IADrE,cACQG,EADR,gBAEeA,EAAIC,OAFnB,mHAKeC,EAAa,GAAbA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA4Bb,GAA5B,uFACoBU,MAAM,GAAD,OAAIH,EAAJ,kBAAsBP,EAAtB,oBAAoCQ,IAD7D,cACQG,EADR,gBAEeA,EAAIC,OAFnB,mHAKerB,EAAa,GAAbA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA4BS,GAA5B,uFACoBU,MAAM,GAAD,OAAIH,EAAJ,kBAAsBP,EAAtB,4BAA4CQ,IADrE,cACQG,EADR,gBAEeA,EAAIC,OAFnB,mHAKeE,EAAgB,GAAhBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA+Bd,GAA/B,uFACoBU,MAAM,GAAD,OAAIH,EAAJ,kBAAsBP,EAAtB,4BAA4CQ,IADrE,cACQG,EADR,gBAEeA,EAAIC,OAFnB,mHAKeG,EAAgB,GAAhBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA+BC,GAA/B,uFACoBN,MAAM,GAAD,OAClBH,EADkB,iCACeC,EADf,kBACgCQ,IAFzD,cACQL,EADR,gBAIeA,EAAIC,OAJnB,0G","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","services/Api.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 16px;\n`;\nexport const Item = styled.li`\n  flex-basis: calc((50% - 7 * 5px) / 3);\n`;\n\nexport const NameCast = styled.p`\n  font-size: 14px;\n  font-weight: 500;\n`;\n\nexport const Img = styled.img`\n  width: 140px;\n  height: 140px;\n  margin-bottom: 16px;\n  object-fit: cover;\n  border-radius: 10px;\n`;\n\nexport const Character = styled.p`\n  margin-top: 8px;\n  font-size: 14px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCast } from 'services/Api';\nimport * as styl from './Cast.styled';\nimport Notiflix from 'notiflix';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState(null);\n\n  useEffect(() => {\n    getMovieCast(movieId)\n      .then(({ cast }) => {\n        console.log(cast);\n        setCast(cast);\n      })\n      .catch(error => console.log(error))\n      .finally();\n  }, [movieId]);\n\n  if (!cast) {\n    // Notiflix.Notify.warning(\n    //   'Sorry. There is no list of actors for this film.('\n    // );\n    return;\n  }\n\n  return (\n    <>\n      {cast.length > 0 ? (\n        <styl.List>\n          {cast.map(({ id, character, name, profile_path }) => (\n            <styl.Item key={id}>\n              <styl.Img\n                src={`https://image.tmdb.org/t/p/w500${profile_path}`}\n                alt={name}\n              />\n              <styl.NameCast>{name}</styl.NameCast>\n              <styl.Character>Character: {character}</styl.Character>\n            </styl.Item>\n          ))}\n        </styl.List>\n      ) : (\n        Notiflix.Notify.warning(\n          'Sorry. There is no list of actors for this film.('\n        )\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","// приклад запиту\n// https://api.themoviedb.org/3/movie/550?api_key=e0f7258397e08a39ddd2202708092bf4\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'e0f7258397e08a39ddd2202708092bf4';\n\nasync function getTrending() {\n  const res = await fetch(`${BASE_URL}/trending/movie/week?api_key=${API_KEY}`);\n  return await res.json();\n}\n\nasync function getMovieById(id) {\n  const res = await fetch(`${BASE_URL}/movie/${id}?api_key=${API_KEY}`);\n  return await res.json();\n}\n\nasync function getMovieCast(id) {\n  const res = await fetch(`${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}`);\n  return await res.json();\n}\n\nasync function getMovieReviews(id) {\n  const res = await fetch(`${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}`);\n  return await res.json();\n}\n\nasync function getMovieByQuery(query) {\n  const res = await fetch(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}`\n  );\n  return await res.json();\n}\n\nexport {\n  getTrending,\n  getMovieById,\n  getMovieCast,\n  getMovieReviews,\n  getMovieByQuery,\n};\n"],"names":["List","styled","Item","NameCast","Img","Character","movieId","useParams","useState","cast","setCast","useEffect","getMovieCast","then","console","log","catch","error","finally","length","map","id","character","name","profile_path","src","alt","Notiflix","BASE_URL","API_KEY","getTrending","fetch","res","json","getMovieById","getMovieReviews","getMovieByQuery","query"],"sourceRoot":""}